/*
 * File: app/controller/CInstanceCtl.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CInstanceCtl', {
    extend: 'Ext.app.Controller',

    TargetDomain: 'gmoreglogger',
    TargetRegion: 'sdb.ap-northeast-1.amazonaws.com',
    stores: [
        'SGmoregloggerInfo',
        'SDomainInfo',
        'MyJsonPStore2'
    ],
    views: [
        'CpInstanceAct',
        'CpDmainItemList'
    ],

    refs: [
        {
            ref: 'instanceAct',
            selector: 'cpinstanceAct#instanceAct1'
        },
        {
            ref: 'dmlist',
            selector: 'cpdomainlist#cpdomainlist1'
        },
        {
            ref: 'dmitemlist',
            selector: 'cpdomainitempanel#cpdmainitemlist3'
        },
        {
            ref: 'testlist',
            selector: 'cptestlist#cptestlist1'
        }
    ],

    onPanelEvSearchData: function(type, cond, eventOptions) {
        if(type==='ViewItems'){
            var vStore = this.getDmitemlist().down('#cpdmainitemlist1').getStore();
            var vProxy = vStore.getProxy();


            cond.region = this.TargetRegion;
            cond.domain = this.TargetDomain;


            //サーバに送信するパラメータを設定
            vProxy.extraParams = cond;
            vStore.load();

        }


    },

    onPanelEvEditDomain: function(type, cond, eventOptions) {
        this.fnCallAWSAPI(type,cond);

    },

    onGridpanelEvLoadItemDetail: function(cond, dclick, eventOptions) {
        var imd = this.getDmitemlist().down('#cpitemdetail1');
        var gd = this.getDmitemlist().down('#cpdmainitemlist1');
        var sm = gd.getSelectionModel();
        var r = sm.getSelection();

        if(r.length>0){


            this.fnGetItemDetail(r[0].data,imd,dclick);
        }


    },

    onGridpanelEvDomainItemDCL: function(target) {


        var _domain = rec.raw.domain;

        var cond = {region:this.getInstanceAct().ctlRegion, domain:_domain};




        var vStore = this.getDmitemlist().down('#cpdmainitemlist1').getStore();
        var vProxy = vStore.getProxy();

        //サーバに送信するパラメータを設定
        vProxy.extraParams = cond;
        vStore.load();
    },

    onGridpanelEvCheckConfirm: function(chkstate, eventOptions) {
        var imd = this.getDmitemlist().down('#cpitemdetail1');
        var gd = this.getDmitemlist().down('#cpdmainitemlist1');
        var sm = gd.getSelectionModel();
        var r = sm.getSelection();

        if(r.length>0){


            this.fnCheckConfirm(r[0].data.id===imd.down('#itemct').CurrID,imd,r[0].data);
        }

    },

    onGridpanelEvResendItem: function(pass, eventOptions) {
        var imd = this.getDmitemlist().down('#cpitemdetail1');
        var gd = this.getDmitemlist().down('#cpdmainitemlist1');
        var sm = gd.getSelectionModel();
        var r = sm.getSelection();

        if(r.length>0){


            this.fnResendItem(r[0].data.id===imd.down('#itemct').CurrID,imd,r[0].data,pass);
        }

    },

    fnCallAWSAPI: function(typ, cond) {
        Ext.Msg.alert('sdb','ドメインを変更します。'+cond.region);

        if(typ===null | cond===null){

            Ext.Msg.alert('sdb','ドメインを指定してください。');
            return;

        }


        var data = {op:typ,region:cond.region,domain:cond.domain};


        var xmlHttpRequest = new XMLHttpRequest();
        xmlHttpRequest.onreadystatechange = function()
        {
            var READYSTATE_COMPLETED = 4;
            var HTTP_STATUS_OK = 200;

            if( xmlHttpRequest.readyState == READYSTATE_COMPLETED && 
            xmlHttpRequest.status == HTTP_STATUS_OK )
            {
                // レスポンスの表示
                var obj = eval("(" + xmlHttpRequest.responseText + ')');
                if(obj.success){


                }
                else
                {
                    Ext.Msg.alert('ACPJ-AWS',obj);
                    return;

                }
            }
        };

        xmlHttpRequest.open( 'POST', '../modules/sdbRegDomain.php' );

        // サーバに対して解析方法を指定する
        xmlHttpRequest.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );

        // データをリクエスト ボディに含めて送信する
        xmlHttpRequest.send( this.EncodeHTMLForm( data ) );



    },

    EncodeHTMLForm: function(data) {

        var params = [];

        for( var name in data )
        {
            var value = data[ name ];
            var param = encodeURIComponent( name ).replace( /%20/g, '+' )
            + '=' + encodeURIComponent( value ).replace( /%20/g, '+' );

            params.push( param );
        }

        return params.join( '&' );

    },

    fnGetItemDetail: function(rowdt, imd, dclick) {
        //Ext.Msg.alert('sdb','S3ファイルを取得します。'+pathinfo);

        var pathinfo = rowdt.s3path;

        imd.down('#itemdetailinfo').setValue('');


        var store = this.application.getStore('SItemDetail');
        var px = store.getProxy();
        px.extraParams = {s3path:pathinfo};

        store.load({scope:this,
            callback: function(records,success){
                if(success){
                    var rslt = records[0].raw.body;

                    imd.down('#itemdetailinfo').setValue(rslt);

                    var jd = Ext.JSON.decode(rslt,true);

                    imd.down('#itemct').CurrID = rowdt.id;


                    imd.down('#itemct').down('#itemdetailp').setSource({});
                    imd.down('#itemct').down('#itemdetailp2').setSource({});
                    imd.down('#itemct').down('#itemdetailp3').setSource({});
                    for(aa in jd)
                    {
                        if(aa==='data'){
                            //プロパティへセット

                            imd.down('#itemct').down('#itemdetailp').setSource(jd[aa]);
                        }

                        if(aa==='request'){
                            //プロパティへセット

                            imd.down('#itemct').down('#itemdetailp2').setSource(jd[aa]);
                        }

                        if(aa==='response'){
                            //プロパティへセット

                            imd.down('#itemct').down('#itemdetailp3').setSource(jd[aa]);
                        }

                        //console.debug(aa);
                        //console.debug(jd[aa]);
                    }
                    /*
                    if(dclick){
                    imd.setCollapsed(true);
                    }
                    */

                }
            }
        });



    },

    fnCheckConfirm: function(sel, imd, dt) {

        var cdt = {data:imd.down('#itemct').down('#itemdetailp').source,
        request:imd.down('#itemct').down('#itemdetailp2').source};


        if(!sel){
            Ext.Msg.alert('ACPJ-AWS','送信データ詳細に表示されているデータを確認済みにしました。');

        }


        var data = {id:imd.down('#itemct').CurrID};


        var xmlHttpRequest = new XMLHttpRequest();
        xmlHttpRequest.onreadystatechange = function()
        {
            var READYSTATE_COMPLETED = 4;
            var HTTP_STATUS_OK = 200;

            if( xmlHttpRequest.readyState == READYSTATE_COMPLETED && 
            xmlHttpRequest.status == HTTP_STATUS_OK )
            {
                // レスポンスの表示
                var obj = eval("(" + xmlHttpRequest.responseText + ')');
                if(obj.success){

                    Ext.Msg.alert('ACPJ-AWS','確認済みにしました。');

                }
                else
                {
                    Ext.Msg.alert('ACPJ-AWS',obj);
                    return;

                }
            }
        };

        xmlHttpRequest.open( 'POST', '../modules/sdbRegGmoCheckConfirm.php' );

        // サーバに対して解析方法を指定する
        xmlHttpRequest.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );

        // データをリクエスト ボディに含めて送信する
        xmlHttpRequest.send( this.EncodeHTMLForm( data ) );


    },

    fnResendItem: function(sel, imd, dt, pass) {
        var cdt = {data:imd.down('#itemct').down('#itemdetailp').source,
        request:imd.down('#itemct').down('#itemdetailp2').source};


        if(!sel){
            Ext.Msg.alert('ACPJ-AWS','送信データ詳細に表示されているデータを再処理しました。');

        }



        var data = {pass:pass,resend:Ext.JSON.encodeValue(cdt)};


        var xmlHttpRequest = new XMLHttpRequest();
        xmlHttpRequest.onreadystatechange = function()
        {
            var READYSTATE_COMPLETED = 4;
            var HTTP_STATUS_OK = 200;

            if( xmlHttpRequest.readyState == READYSTATE_COMPLETED && 
            xmlHttpRequest.status == HTTP_STATUS_OK )
            {
                // レスポンスの表示
                var obj = eval("(" + xmlHttpRequest.responseText + ')');
                if(obj.success){

                    Ext.Msg.alert('ACPJ-AWS',xmlHttpRequest.responseText);//'DB再転送しました。');

                }
                else
                {
                    Ext.Msg.alert('ACPJ-AWS',obj);
                    return;

                }
            }
        };

        xmlHttpRequest.open( 'POST', '../modules/sdbRegGmoResendItem.php' );

        // サーバに対して解析方法を指定する
        xmlHttpRequest.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );

        // データをリクエスト ボディに含めて送信する
        xmlHttpRequest.send( this.EncodeHTMLForm( data ) );

    },

    init: function(application) {
        this.control({
            "panel": {
                evSearchData: this.onPanelEvSearchData,
                evEditDomain: this.onPanelEvEditDomain
            },
            "gridpanel": {
                evLoadItemDetail: this.onGridpanelEvLoadItemDetail,
                evDomainItemDCL: this.onGridpanelEvDomainItemDCL,
                evCheckConfirm: this.onGridpanelEvCheckConfirm,
                evResendItem: this.onGridpanelEvResendItem
            }
        });
    }

});
